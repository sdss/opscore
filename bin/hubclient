#!/usr/bin/env python

"""Example trivial telnet client using TkSocket

History:
2009-07-10 ROwen    Removed an inline conditional statement to be Python 2.4 compatible.
"""
import re, os, platform, pwd, sys, time
import Tkinter
import RO.Comm.TCPConnection
import RO.Wdg


class TCPClient(Tkinter.Frame):
    def __init__(self, master, addr, port=None, cmdrName=None):
        Tkinter.Frame.__init__(self, master)
        self.master = master
        self.displayRegexp = None       # regexp must match to display output in window

        self.logWdg = RO.Wdg.LogWdg(
            master = self,
            maxLines = 1000,
        )
        self.logWdg.grid(row=0, column=0, sticky="nsew")
        
        self.bottomWdg = Tkinter.Frame(self, background="")
        self.bottomWdg.grid(row=1, column=0, sticky="ew")

        self.prefixWdg = RO.Wdg.CmdWdg(
            master = self.bottomWdg,
            maxCmds = 10,
            cmdFunc = self.prefixCmd,
            relief="flat",
            width=15
        )

        self.cmdWdg = RO.Wdg.CmdWdg(
            master = self.bottomWdg,
            maxCmds = 100,
            cmdFunc = self.doCmd,
        )

        self.reWdg = RO.Wdg.CmdWdg(
            master = self.bottomWdg,
            maxCmds = 10,
            cmdFunc = self.doRe,
            width=20

        )

        self.prefixWdg.pack(fill="x", side="left"); self.prefix = None
        self.cmdWdg.pack(fill="x", side="left", expand=True)
        Tkinter.Label(self.bottomWdg, text=" Filter actors:").pack(side="left")
        self.reWdg.pack(side="right")

        self.cmdrName = cmdrName if cmdrName else \
                        "%s.%s" % (pwd.getpwuid(os.getuid()).pw_name, platform.node().split('.')[0])
        self.cmdID = 1
    
        self.conn = RO.Comm.TCPConnection.TCPConnection(
            host = addr,
            port = port,
            readLines = True,
            stateCallback = self.connState,
            readCallback = self.connRead,
        )
        self.conn.connect()
        
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)
    
    def connState(self, sock):
        stateVal, stateStr, reason = sock.getFullState()
        if reason:
            self.logMsg("*** Socket %s: %s" % (stateStr, reason))
        else:
            self.logMsg("*** Socket %s" % (stateStr,))
    
    def connRead(self, sock, readStr):
        self.logMsg(readStr)

    def doRe(self, actorsToDisplay):
        """Set a new regexp"""
        if actorsToDisplay:
            self.displayRegexp = r"^\S+\s+\d+\s+(%s)\s+(\S+)\s+" % "|".join(actorsToDisplay.split())
        else:
            self.displayRegexp = None
            
        self.setTitle(actorsToDisplay)

    def doCmd(self, cmd):
        if not cmd:
            self.logMsg('<cr>')
            return

        cmd = "%s %d %s" % (self.cmdrName, self.cmdID, cmd)
        self.cmdID += 1
        if not self.conn.isConnected():
            self.logMsg("*** Not connected")
        self.conn.writeLine(cmd)

        if self.prefix:
            self.cmdWdg.set(self.prefix + " ")
            self.cmdWdg.icursor("end")

    def prefixCmd(self, prefix):
        self.prefixWdg.clear()
        self.prefix = prefix.strip()
        self.prefixWdg.set(self.prefix)

        self.cmdWdg.clear()
        if self.prefix:
            self.cmdWdg.insert(0, self.prefix + " ")
            self.cmdWdg.icursor("end")
        self.cmdWdg.focus_force()

    def logMsg(self, msg):
        r"""Append msg to log, with terminating \n"""

        if self.displayRegexp:
            if not re.search(self.displayRegexp, msg) and msg != "<cr>":
                return

        self.logWdg.addOutput("%s %s\n" % (time.strftime("%H:%M:%S"), msg))

    def setTitle(self, actorsToDisplay=""):
        if actorsToDisplay:
            actorsToDisplay = "    Actors: [%s]" % actorsToDisplay.replace("|", " ")
        self.master.title("hubclient: %s%s" % (self.cmdrName, actorsToDisplay))


if __name__ == "__main__":
    if len(sys.argv) not in (1,3):
        print "Usage: tcpclient.py addr [port]"
        sys.exit(1)
    
    addr = sys.argv[1] if len(sys.argv) > 1 else "hub25m"
    port = sys.argv[2] if len(sys.argv) > 2 else 6093
    
    root = Tkinter.Tk()
    root.geometry("1000x500")
    client = TCPClient(root, addr, port)
    client.setTitle()

    client.pack(side="top", expand=True, fill="both")

    root.mainloop()
